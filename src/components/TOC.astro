---
interface Props {
  content: string;
  title?: string;
}

const { content, title = "Table of Contents" } = Astro.props;

// Extract headings from HTML content
function extractHeadings(html: string) {
  const headings: Array<{ level: number; text: string; slug: string }> = [];
  const headingRegex = /<h([2-6])([^>]*)>(.*?)<\/h[2-6]>/gi;
  let match;

  while ((match = headingRegex.exec(html)) !== null) {
    const level = parseInt(match[1]);
    const text = match[3].replace(/<[^>]*>/g, '').trim(); // Remove HTML tags
    const slug = generateSlug(text);
    
    headings.push({ level, text, slug });
  }

  return headings;
}

// Generate URL-friendly slug
function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove special characters
    .replace(/\s+/g, '-') // Replace spaces with hyphens
    .replace(/--+/g, '-') // Replace multiple hyphens with single
    .trim();
}

const headings = extractHeadings(content);
---

{headings.length > 0 && (
  <nav class="toc-sidebar" aria-label="Table of Contents">
    <div class="toc-container">
      <h2 class="toc-title">{title}</h2>
      <ul class="toc-list" id="toc-list">
        {headings.map((heading) => (
          <li class={`toc-item toc-level-${heading.level}`}>
            <a 
              href={`#${heading.slug}`}
              class="toc-link"
              data-target={heading.slug}
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </nav>
)}

<script>
  // Add IDs to headings and set up intersection observer
  document.addEventListener('DOMContentLoaded', function() {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings: Element[] = [];
    
    // Add IDs to headings and collect them
    tocLinks.forEach(link => {
      const targetId = link.getAttribute('data-target');
      if (targetId) {
        const allHeadings = document.querySelectorAll('h2, h3, h4, h5, h6');
        
        // Find the heading that matches our text
        allHeadings.forEach(h => {
          const headingText = h.textContent?.trim();
          const linkText = link.textContent?.trim();
          if (headingText === linkText) {
            h.id = targetId;
            headings.push(h);
          }
        });
      }
    });

    // Set up intersection observer for scroll highlighting
    if (headings.length > 0) {
      const observerOptions = {
        root: null,
        rootMargin: '-20% 0px -80% 0px',
        threshold: 0
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const id = entry.target.id;
          const tocLink = document.querySelector(`[data-target="${id}"]`);
          
          if (entry.isIntersecting) {
            // Remove active class from all links
            tocLinks.forEach(link => link.classList.remove('active'));
            // Add active class to current link
            tocLink?.classList.add('active');
          }
        });
      }, observerOptions);

      headings.forEach(heading => {
        observer.observe(heading);
      });
    }

    // Smooth scroll for TOC links
    tocLinks.forEach(link => {
      link.addEventListener('click', function(e: Event) {
        e.preventDefault();
        const targetId = (e.target as HTMLAnchorElement).getAttribute('data-target');
        const targetElement = document.getElementById(targetId || '');
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>

<style>
  .toc-sidebar {
    position: sticky;
    top: 2rem;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
    padding: 1.5rem;
    background: hsl(var(--card));
    border: 1px solid hsl(var(--border));
    border-radius: var(--radius);
    box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  }

  .toc-container {
    min-width: 200px;
  }

  .toc-title {
    font-size: 1rem;
    font-weight: 600;
    color: hsl(var(--foreground));
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid hsl(var(--border));
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-item {
    margin-bottom: 0.25rem;
  }

  .toc-link {
    display: block;
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
    color: hsl(var(--muted-foreground));
    text-decoration: none;
    border-radius: calc(var(--radius) - 2px);
    transition: all 0.2s ease;
    border-left: 2px solid transparent;
    line-height: 1.4;
  }

  .toc-link:hover {
    color: hsl(var(--foreground));
    background-color: hsl(var(--muted));
    border-left-color: hsl(var(--primary));
  }

  .toc-link.active {
    color: hsl(var(--primary));
    background-color: hsl(var(--primary) / 0.1);
    border-left-color: hsl(var(--primary));
    font-weight: 500;
  }

  /* Level-based indentation */
  .toc-level-2 .toc-link {
    padding-left: 0.75rem;
  }

  .toc-level-3 .toc-link {
    padding-left: 1.5rem;
    font-size: 0.8125rem;
  }

  .toc-level-4 .toc-link {
    padding-left: 2.25rem;
    font-size: 0.8125rem;
  }

  .toc-level-5 .toc-link {
    padding-left: 3rem;
    font-size: 0.75rem;
  }

  .toc-level-6 .toc-link {
    padding-left: 3.75rem;
    font-size: 0.75rem;
  }

  /* Responsive adjustments */
  @media (max-width: 1280px) {
    .toc-sidebar {
      position: static;
      max-height: none;
      margin-bottom: 2rem;
    }
  }

  /* Scrollbar styling */
  .toc-sidebar::-webkit-scrollbar {
    width: 4px;
  }

  .toc-sidebar::-webkit-scrollbar-track {
    background: hsl(var(--muted));
    border-radius: 2px;
  }

  .toc-sidebar::-webkit-scrollbar-thumb {
    background: hsl(var(--muted-foreground));
    border-radius: 2px;
  }

  .toc-sidebar::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--primary));
  }

  /* Accessibility improvements */
  .toc-link:focus {
    outline: 2px solid hsl(var(--primary));
    outline-offset: 2px;
  }

  /* Animation for smooth transitions */
  .toc-link {
    transition: color 0.2s ease, background-color 0.2s ease, border-left-color 0.2s ease, font-weight 0.2s ease;
  }
</style>